# Python CircleCI 2.0 configuration file
  jobs:	#
    build:	# Check https://circleci.com/docs/2.0/language-python/ for more details
      docker: 	#
        - image: circleci/node:4.8.2 # the primary container, where your job's commands are run	version: 2
      steps:	jobs:
        - checkout # check out the code in the project directory	  build:
        - run: echo "hello world" # run the `echo` command	    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/prueba_travis
    steps:
      - checkout
      - python/load-cache
      - python/install-deps	          - python/install-deps
      - python/save-cache	          - python/save-cache

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            cd ./test && pytest -s -v test.py
      - store_artifacts:
          path: test-reports
          destination: test-reports
